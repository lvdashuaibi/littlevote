version: '3'

networks:
  redis-net:
    driver: bridge

services:
  # MySQL主从配置
  mysql-master:
    image: mysql:8.0
    container_name: mysql-master
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: littlevote
    ports:
      - "3306:3306"
    volumes:
      - ./scripts/mysql-master:/docker-entrypoint-initdb.d
      - mysql-master-data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password --server-id=1 --log-bin=mysql-bin --binlog-format=ROW

  mysql-slave:
    image: mysql:8.0
    container_name: mysql-slave
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: littlevote
    ports:
      - "3307:3306"
    volumes:
      - ./scripts/mysql-slave:/docker-entrypoint-initdb.d
      - mysql-slave-data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password --server-id=2 --log-bin=mysql-bin --binlog-format=ROW
    depends_on:
      - mysql-master

  # Redis独立节点配置 (用于RedLock分布式锁)
  redis1:
    image: redis
    container_name: redis1
    networks:
      - redis-net
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis1-data:/data

  redis2:
    image: redis
    container_name: redis2
    networks:
      - redis-net
    ports:
      - "6380:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis2-data:/data

  redis3:
    image: redis
    container_name: redis3
    networks:
      - redis-net
    ports:
      - "6381:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis3-data:/data
      
  # Redis数据存储节点
  redis-data:
    image: redis
    container_name: redis-data
    networks:
      - redis-net
    ports:
      - "6382:6379"
    command: ["redis-server", "--appendonly", "yes", "--maxmemory", "4gb", "--maxmemory-policy", "volatile-lru", "--hz", "30"]
    volumes:
      - redis-data:/data

  # Kafka配置
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # 自动创建主题配置
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      # 默认分区数为8
      KAFKA_NUM_PARTITIONS: 8

  # ETCD配置
  etcd:
    image: bitnami/etcd:latest
    container_name: etcd
    ports:
      - "2379:2379"
      - "2380:2380"
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
    volumes:
      - etcd-data:/bitnami/etcd

volumes:
  mysql-master-data:
  mysql-slave-data:
  redis1-data:
  redis2-data:
  redis3-data:
  redis-data:
  etcd-data: 